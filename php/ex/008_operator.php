<?php
// 산술 연산자
// 사칙연산 나머지를 구하는 연산자
$num1 = 10;
$num2 = 8;

// 더하기
// $sum은 숫자 담는 타입
$sum = $num1 + $num2; //식
echo $sum, "\n"; // 결과

// 빼기
$minus = $num1 - $num2; //식
echo $minus, "\n"; // 결과

// 곱하기
$multi = $num1 * $num2; //식
echo $multi, "\n"; // 결과

// 나누기
$division = $num1 / $num2; //식
echo $division, "\n"; // 결과

// 나머지**
$reminder = $num1 % $num2; //식
echo $reminder; // 결과
echo "\n";
// 산술 대입 연산자
$num = 10;
// 더하기
$num = $num + 5; //원래는 산술 대입 연산자 식
$num += 5; //간단한 산술 대입 연산자 식
echo $num;

// 빼기
$num = $num - 5; //원래는 산술 대입 연산자 식
$num -= 5; //간단한 산술 대입 연산자 식

// 빼기
$num = $num * 5; //원래는 산술 대입 연산자 식
$num *= 5; //간단한 산술 대입 연산자 식

// 나누기
$num = $num / 5; //원래는 산술 대입 연산자 식
$num /= 5; //간단한 산술 대입 연산자 식

// 나머지
$num = $num % 5; //원래는 산술 대입 연산자 식
$num %= 5; //간단한 산술 대입 연산자 식

// 문자열 열결
//원래는 산술 대입 연산자 식
$str1 = "안녕"; 
$str1 = $str1."하세요";
//간단한 산술 대입 연산자 식
$str1 = "안녕"; 
$str1 .= "하세요";


// 산술대입연산자로 프로그램을 만들어주세요.
// 아래 과정을 실행해 주세요.
// 출력 포맷은 "현재 tng_num의 값 : 계산한값"으로 출력
// 예)현재 tng_num의 값 : 20
// 각 과정마다 출력

$tng_num = 100;
$base_str = "현재 tng_num의 값 : ";
$line = "\n";
// $tng_num에 10을 더해주세요.
$tng_num += 10;
echo $base_str.(string)$tng_num.$line; // 변수로 식을 정하면 추후에 수정시 편하다 **

// $tng_num에 5로 나누어주세요.
$tng_num /= 5;
echo "현재 tng_num의 값 : " .(string)$tng_num, "\n";

// $tng_num에 4를 빼주세요.
$tng_num -= 4;
echo "현재 tng_num의 값 : " .(string)$tng_num, "\n";

// $tng_num를 7로 나눈 나머지를 구해주세요.
$tng_num %= 7;
echo "현재 tng_num의 값 : " .(string)$tng_num, "\n";

// $tng_num에 3을 곱해주세요.
$tng_num *= 3;
echo "현재 tng_num의 값 : " .(string)$tng_num, "\n";

// 비교 연산자 : 왼쪽이 기준으로 / 값을 출력하면 두 변수 비교하여 true or false로 반환해준다
// 변수1 > 변수2 : 변수1이 변수2 보다 크다.
var_dump(3 > 2);
var_dump(1 > 2);

// 변수1 < 변수2 : 변수1이 변수2 보다 작다.
var_dump(3 < 2);
var_dump(1 < 2);

// 변수1 >= 변수2 : 변수1이 변수2보다 크거나 같다
var_dump(1 >= 1);
var_dump(1 >= 2);
var_dump(1 >= 0);

// 변수1 <= 변수2 : 변수1이 변수2보다 작거나 같다
var_dump(1 <= 1);
var_dump(1 <= 2);
var_dump(1 <= 0);

// 변수1 == 변수2 (불안전 비교): 변수1과 변수2가 같다., 데이터 타입 체크 안함
var_dump( 1 == 1 );
var_dump( 1 == "1" );
// 변수1 === 변수2 (안전 비교): 변수1과 변수2가 같다., 데이터 타입 체크 한다 <-- "표준개발기법"
var_dump( 1 === 1 );
var_dump( 1 === "1" );
var_dump( 1 === (int)"1" ); //int타입으로 변경

// ! : 반대를 뜻한다
// 변수1 != 변수2 (불안전 비교): 변수1과 변수2가 같지 않다, 데이터 타입 체크 안함
var_dump( 1 != 1 );
var_dump( 1 != "1" );
// 변수1 !== 변수2 (안전 비교): 변수1과 변수2가 같지 않다, 데이터 타입 체크 한다 <-- "표준개발기법"
var_dump( 1 !== 1 );
var_dump( 1 !== "1" );

// 논리 연산자
// and 연산자(&&) : 조건이 모드 만족하면 true, 하나라도 틀리면 false
var_dump( 1 === 1 && 2 ===2 );
var_dump( 1 === 1 && 1 ===2 );
// or 연산자(||) : 조건 중 하나라도 만족하면 true, 모두 틀리면 false
var_dump( 1 === 1 || 2 ===2 );
var_dump( 1 === 1 || 1 ===2 );
var_dump( 1 === 3 || 1 ===2 );
// not 연산자(!) : 연산의 결과를 반전
var_dump( !(1 === 1) );

// 증감 연산자
$num = 1;
// 후위 증감 연산자 : 한처리가 끝난 후에 처리한다
$num++; // 1씩 증가
$num--; // 1씩 감소

// 전위 증감 연산자 : 한처리가 끝나기 전에 처리한다
++$num; // 1씩 증가
--$num; // 1씩 감소